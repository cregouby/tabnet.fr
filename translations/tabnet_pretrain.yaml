title:
  original: Tabnet model
  translation: ~
arguments:
  x:
    original: |-
      Depending on the context:
      \itemize{
      \item A \strong{data frame} of predictors.
      \item A \strong{matrix} of predictors.
      \item A \strong{recipe} specifying a set of preprocessing steps
      created from \code{\link[recipes:recipe]{recipes::recipe()}}.
      }

      The predictor data should be standardized (e.g. centered or scaled).
      The model treats categorical predictors internally thus, you don't need to
      make any treatment.
    translation: ~
  '...':
    original: |-
      Model hyperparameters.
      Any hyperparameters set here will update those set by the config argument.
      See \code{\link[=tabnet_config]{tabnet_config()}} for a list of all possible hyperparameters.
    translation: ~
  'y':
    original: (optional) When \code{x} is a \strong{data frame} or \strong{matrix},
      \code{y} is the outcome
    translation: ~
  tabnet_model:
    original: |-
      A pretrained TabNet model object to continue the fitting on.
      if \code{NULL} (the default) a brand new model is initialized.
    translation: ~
  config:
    original: |-
      A set of hyperparameters created using the \code{tabnet_config} function.
      If no argument is supplied, this will use the default values in \code{\link[=tabnet_config]{tabnet_config()}}.
    translation: ~
  from_epoch:
    original: |-
      When a \code{tabnet_model} is provided, restore the network weights from a specific epoch.
      Default is last available checkpoint for restored model, or last epoch for in-memory model.
    translation: ~
  formula:
    original: |-
      A formula specifying the outcome terms on the left-hand side,
      and the predictor terms on the right-hand side.
    translation: ~
  data:
    original: |-
      When a \strong{recipe} or \strong{formula} is used, \code{data} is specified as:
      \itemize{
      \item A \strong{data frame} containing both the predictors and the outcome.
      }
    translation: ~
value:
  original: |
    A TabNet model object. It can be used for serialization, predictions, or further fitting.
  translation: ~
description:
  original: |
    Pretrain the \href{https://arxiv.org/abs/1908.07442}{TabNet: Attentive Interpretable Tabular Learning} model
    on the predictor data exclusively (unsupervised training).
  translation: ~
section{outcome}:
  original: |
    Outcome value are accepted here only for consistent syntax with \code{tabnet_fit}, but
    by design the outcome, if present, is ignored during pre-training.
  translation: ~
section{pre-training from a previous model}:
  original: |
    When providing a parent \code{tabnet_model} parameter, the model pretraining resumes from that model weights
    at the following epoch:
    \itemize{
    \item last pretrained epoch for a model already in torch context
    \item Last model checkpoint epoch for a model loaded from file
    \item the epoch related to a checkpoint matching or preceding the \code{from_epoch} value if provided
    The model pretraining metrics append on top of the parent metrics in the returned TabNet model.
    }
  translation: ~
section{Threading}:
  original: |
    TabNet uses \code{torch} as its backend for computation and \code{torch} uses all
    available threads by default.

    You can control the number of threads used by \code{torch} with:

    \if{html}{\out{<div class="sourceCode">}}\preformatted{torch::torch_set_num_threads(1)
    torch::torch_set_num_interop_threads(1)
    }\if{html}{\out{</div>}}
  translation: ~
examples:
  original: |
    \dontshow{if (torch::torch_is_installed()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
    data("ames", package = "modeldata")
    pretrained <- tabnet_pretrain(Sale_Price ~ ., data = ames, epochs = 1)
    \dontshow{\}) # examplesIf}
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
